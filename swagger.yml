swagger: '2.0'
info:
  version: '1.0'
  title: Home API
  description: An api to add smart devices to your home and control them
#host: ????
basePath: /dev
schemes:
  - https
#Should work but doesn't, so you need to put on all methods
security:
  - api_key: []
consumes:
  - application/json
produces:
  - application/json
paths:
  /rooms:
    post:
      description: Adds a new room to your home
      security:
        - api_key: []
      parameters:
        - in: body
          name: roomName
          description: Name of room to be added to the home
          type: string
      x-lambda-function: create-room
      responses:
        200:
          description: A room
          schema:
            $ref: '#/definitions/Room'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: Gets a list of all rooms in your home
      security:
        - api_key: []
      responses:
        200:
          description: A list of rooms
          schema:
            type: array
            items:
              $ref: '#/definitions/Room'
        400:
          description: Error
      x-lambda-function: get-rooms
  /rooms/{roomID}:
    get:
      description: Get a room
      security:
        - api_key: []
      responses:
        200:
          description: A room
          schema:
            $ref: '#/definitions/Room'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: get-room
    patch:
      description: Update Room
      security:
        - api_key: []
      parameters:
        - in: body
          name: roomName
          description: Name of room to be added to the home
          type: string
      resonses:
        200:
          description: Updated Room
          schema:
            message:
              description: Message
              type: string
        400:
          descrition: Error
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: update-room
    delete:
      description: Delete a room
      security:
        - api_key: []
      responses:
        200:
          description: Delete Message
          schema:
            message:
              description: Message
              type: string
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: delete-room

#Devices
  /rooms/{roomID}/devices:
    get:
      description: Returns a list of all devices in a room
      security:
        - api_key: []
      responses:
        200:
          description: A list of devices
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
      x-lambda-function: get-devices
    post:
      description: Add a new device to a specific room
      security:
        - api_key: []
      requestBody:
        description: Device to be added to API
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Device'
      responses:
        200:
          description: Device Details
          schema:
            $ref: '#definitions/Device'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: create-device
  /devices:
    get:
      description: Returns a list of all devices
      security:
        - api_key: []
      responses:
        200:
          description: A list of devices
          schema:
            type: array
            items:
              $ref: '#definitions/Device'
      x-lambda-function: get-devices
    post:
      description: Add a device that does not belong to a room
      security:
        - api_key: []
      requestBody:
        description: Device to be added to API
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Device'
      responses:
        200:
          description: Device Details
          schema:
            $ref: '#definitions/Device'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: create-device
  /devices/{deviceID}:
    get:
      description: Get a device
      security:
        - api_key: []
      responses:
        200:
          description: A room
          schema:
            $ref: '#/definitions/Device'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: get-device
    patch:
      description: Update device name and location. (To update parameters need to delete and re-add)
      security:
        - api_key: []
      requestBody:
        description: Device to be updated to API. (Only name, type, and room)
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Device'
      responses:
        200:
          description: Device Details
          schema:
            $ref: '#definitions/Device'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: update-device
    post:
      description: Updates device parameters. Only include the parameters that you want to update. Only need to include uuid and parmValue for each parameter.
      security:
        - api_key: []
      requestBody:
        description: Array of parameter ids and new values
        schema:
          type: Array
          items:
            $ref: '#definitions/Parameter'
      responses:
        200:
          description: Update Message
          schema:
            message:
              description: Update message
              type: string
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: update-device-parameters
    delete:
      description: Deletes a device and all of its parameters
      security:
        - api_key: []
      responses:
        200:
          description: Delete Message
          schema:
            message:
              description: Message
              type: string
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: delete-device
  #Parameters
  /parameters/{paramID}:
    get:
      description: Get a parameter value.
      security:
        - api_key: []
      responses:
        200:
          description: A parameter
          schema:
            $ref: '#/definitions/Parameter'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: get-parameter
    patch:
      description: Update a parameters value
      security:
        - api_key: []
      parameters:
        - in: body
          name: paramValue
          description: New value of the parameter
          type: string
      responses:
        200:
          description: Update Message
          schema:
            message:
              description: Message
              type: string
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: update-parameter      
  /devices/{deviceID}/parameters/{paramID}:
    get:
      description: Get a parameter value
      security:
        - api_key: []
      responses:
        200:
          description: A parameter
          schema:
            $ref: '#/definitions/Parameter'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: get-parameter
    patch:
      description: Update a parameters value
      security:
        - api_key: []
      parameters:
        - in: body
          name: paramValue
          description: New value of the parameter
          type: string
      responses:
        200:
          description: Update Message
          schema:
            message:
              description: Message
              type: string
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: update-parameter
  #Actions
  /actions:
    post:
      description: Add a new action
      security:
        - api_key: []
      requestBody:
        description: Action details to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Action'
      responses:
        200:
          description: Action Details
          schema:
            $ref: '#definitions/Action'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: create-action
    get:
      description: Returns a list of all actions
      security:
        - api_key: []
      responses:
        200:
          description: A list of actions
          schema:
            type: array
            items:
              $ref: '#definitions/Action'
      x-lambda-function: get-actions
  /actions/{actionID}:
    get:
      description: Get an action
      security:
        - api_key: []
      responses:
        200:
          description: An action
          schema:
            $ref: '#/definitions/Action'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: get-action
    patch:
      description: Update action name or commands. Must include all action commands. This will delete all old commands and replace with what is given.
      security:
        - api_key: []
      requestBody:
        description: Action to be updated. Action Name and Commands
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Action'
      responses:
        200:
          description: Update Message
          schema:
            message:
              description: Message
              type: string
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: update-action
    post:
      description: Fire the action. Will execute all of the action commands, updating the parameters.
      security:
        - api_key: []
      responses:
        200:
          description: Executin Message
          schema:
            message:
              description: Message
              type: string
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: fire-action
    delete:
      description: Deletes an action
      security:
        - api_key: []
      responses:
        200:
          description: Delete Message
          schema:
            message:
              description: Message
              type: string
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: delete-action    

  #Conditions
  /conditions:
    post:
      description: Create a new conditions
      security:
        - api_key: []
      requestBody:
        description: Condition to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Condition'
      responses:
        200:
          description: Condition Details
          schema:
            $ref: '#definitions/Condition'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: create-condition
    get:
      description: Returns a list of all conditions
      security:
        - api_key: []
      responses:
        200:
          description: A list of conditions
          schema:
            type: array
            items:
              $ref: '#definitions/Condition'
      x-lambda-function: get-conditions
  /conditions/{conditionID}:
    get:
      description: Get a condition
      security:
        - api_key: []
      responses:
        200:
          description: A condition
          schema:
            $ref: '#/definitions/Condition'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: get-condition
    patch:
      description: Update Condition.
      security:
        - api_key: []
      requestBody:
        description: Condition to be updated. Include only the attributes you want updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Condition'
      responses:
        200:
          description: Update Message
          schema:
            message:
              description: Message
              type: string
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: update-condition

securityDefinitions:
  api_key:
    type: apiKey
    name: x-api-key
    in: header


definitions:
  Error:
    description: Error Message
    properties:
      errorMessage:
        type: string
        description: Description of the error message.
  Room:
    description: A room is a way to organize devices in your home api.
    type: object
    properties:
      uuid:
        type: string
        description: Unique identifier of the the room.
      roomName:
        type: string
        description: Name of the room
      created_at:
        type: string
        description: Time Room was created
      updated_at:
        type: string
        description: Time Room was last updated
  Device:
    description: A device to be shadowed by API
    type: object
    properties:
      uuid:
        type: string
        description: Unique identifier of the device, not required on create
      room_id:
        type: string
        description: Room where device is located, can be blank which means it does not belong to a room.
      deviceName:
        type: string
        description: Name to identify the device
      deviceType:
        type: string
        description: General type of device (thermostat, light, lock, etc.)
      devicePath:
        type: string
        description: Path where device can obtain its properties
      parameters:
        type: array
        items:
          schema:
            $ref: '#definitions/Parameter'
  Parameter:
    description: A parameter that a device either reads from, or writes to.
    type: object
    properties:
      uuid:
        type: string
        description: Parameter ID
        required: true
      paramName:
        type: string
        description: Name of the parameter
        required: true
      paramType:
        type: string
        description: Type of parameter (bool, string, or number)
        required: true
      paramActions:
        type: string
        description: What actions can be taken on the parameter (read,write,both)
        required: true
      paramValue:
        type: string
        description: Value of the parameter. Always a string, but can be converted to bool/string by consumer. Only given when reading devise or parameter. C
          can give it when updating values. Ignored on creating and updated device.
        rerquired: false
  Action:
    description: A action that can be fired to update device parameters.
    type: object
    properties:
      uuid:
        type: string
        description: Action ID
      actionName:
        type: string
        description: Name of Action
      actionCommands:
        type: array
        items:
          schema:
            $ref: '#definitions/ActionCommand'
  ActionCommand:
    description: A command that is executed by an action
    properties:
      paramID: 
        type: string
        description: A paramID of a device that should be set to a new value.
      paramValue:
        type: string
        description: The new value that should be set for the parameter.
  Condition:
    description: A If This than That condition that fires an action. If the paramValue (compare) to comparision value is true, it will fire the action.
    properties:
      uuid: 
        type: string
        description: Condition ID
      conditionName:
        type: string
        description: Name of the condition
      paramID:
        type: string
        description: Parameter to watch
      comparision:
        type: string
        description: How to compare the parameter to the comparision value (>,<,=) >,< only work with number types.
      comparisionValue:
        type: string
        description: Value to compare the parameter to. (Can be true or false.)
      actionID:
        type: string
        description: Action to fire when comparision returns true.

      
      
#Lambda Functions
  
x-lambda-functions:
  #rooms 
  create-room:
    runtime: python3.6
    handler: create_room.lambda_handler
    memory: 128
    path_to_code: ./rooms
  get-rooms:
    runtime: python3.6
    handler: get_rooms.lambda_handler
    memory: 128
    path_to_code: ./rooms
  get-room:
    runtime: python3.6
    handler: get_room.lambda_handler
    memory: 128
    path_to_code: ./rooms
  delete-room:
    runtime: python3.6
    handler: delete_room.lambda_handler
    memory: 128
    path_to_code: ./rooms
  update-room:
    runtime: python3.6
    handler: update_room.lambda_handler
    memory: 128
    path_to_code: ./rooms
  #devices
  create-device:
    runtime: python3.6
    handler: create_device.lambda_handler
    memory: 128
    path_to_code: ./devices
  update-device:
    runtime: python3.6
    handler: update_device.lambda_handler
    memory: 128
    path_to_code: ./devices
  get-device:
    runtime: python3.6
    handler: get_device.lambda_handler
    memory: 128
    path_to_code: ./devices
  get-devices:
    runtime: python3.6
    handler: get_devices.lambda_handler
    memory: 128
    path_to_code: ./devices
  delete-device:
    runtime: python3.6
    handler: delete_device.lambda_handler
    memory: 128
    path_to_code: ./devices
  update-device-parameters:
    runtime: python3.6
    handler: update_dev_params.lambda_handler
    memory: 128
    path_to_code: ./parameters
  get-parameter:
    runtime: python3.6
    handler: get_parameter.lambda_handler
    memory: 128
    path_to_code: ./parameters
  update-parameter:
    runtime: python3.6
    handler: update_parameter.lambda_handler
    memory: 128
    path_to_code: ./parameters
  #actions
  create-action:
    runtime: python3.6
    handler: create_action.lambda_handler
    memory: 128
    path_to_code: ./actions
  get-action:
    runtime: python3.6
    handler: get_action.lambda_handler
    memory: 128
    path_to_code: ./actions
  get-actions:
    runtime: python3.6
    handler: get_actions.lambda_handler
    memory: 128
    path_to_code: ./actions
  delete-action:
    runtime: python3.6
    handler: delete_action.lambda_handler
    memory: 128
    path_to_code: ./actions
  update-action:
    runtime: python3.6
    handler: update_action.lambda_handler
    memory: 128
    path_to_code: ./actions
  fire-action:
    runtime: python3.6
    handler: fire_action.lambda_handler
    memory: 128
    path_to_code: ./actions
  #conditions
  create-condition:
    runtime: python3.6
    handler: create_condition.lambda_handler
    memory: 128
    path_to_code: ./conditions
  get-condition:
    runtime: python3.6
    handler: get_condition.lambda_handler
    memory: 128
    path_to_code: ./conditions
  get-conditions:
    runtime: python3.6
    handler: get_conditions.lambda_handler
    memory: 128
    path_to_code: ./conditions
  update-condition:
    runtime: python3.6
    handler: get_conditions.lambda_handler
    memory: 128
    path_to_code: ./conditions