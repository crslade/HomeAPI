swagger: '2.0'
info:
  version: '1.0'
  title: Home API
  description: An api to add smart devices to your home and control them
#host: ????
basePath: /dev
schemes:
  - https
#Should work but doesn't, so you need to put on all methods
security:
  - api_key: []
paths:
  /rooms:
    post:
      description: Adds a new room to your home
      security:
        - api_key: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: roomName
          description: Name of room to be added to the home
          type: string
      x-lambda-function: create-room
      responses:
        200:
          description: A room
          schema:
            $ref: '#/definitions/Room'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: Gets a list of all rooms in your home
      security:
        - api_key: []
      produces:
        - application/json
      responses:
        200:
          description: A list of rooms
          schema:
            type: array
            items:
              $ref: '#/definitions/Room'
        400:
          description: Error
      x-lambda-function: get-rooms
  /rooms/{roomID}:
    get:
      description: Get a room
      security:
        - api_key: []
      produces:
        - application/json
      responses:
        200:
          description: A room
          schema:
            $ref: '#/definitions/Room'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: get-room
    patch:
      description: Update Room
      security:
        - api_key: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: roomName
          description: Name of room to be added to the home
          type: string
      resonses:
        200:
          description: Updated Room
          schema:
            message:
              description: Message
              type: string
        400:
          descrition: Error
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: update-room
    delete:
      description: Delete a room
      security:
        - api_key: []
      produces:
        - application/json
      responses:
        200:
          description: Delete Message
          schema:
            message:
              description: Message
              type: string
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: delete-room

#Devices
  /rooms/{roomID}/devices:
    get:
      description: Returns a list of all devices in a room
      security:
        - api_key: []
      produces:
        - application/json
      responses:
        200:
          description: A list of devices
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
      x-lambda-function: get-devices
    post:
      description: Add a new device to a specific room
      security:
        - api_key: []
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        description: Device to be added to API
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Device'
      responses:
        200:
          description: Device Details
          schema:
            $ref: '#definitions/Device'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: create-device
  /devices:
    get:
      description: Returns a list of all devices
      security:
        - api_key: []
      produces:
        - application/json
      responses:
        200:
          description: A list of devices
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
      x-lambda-function: get-devices
    post:
      description: Add a device that does not belong to a room
      security:
        - api_key: []
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        description: Device to be added to API
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Device'
      responses:
        200:
          description: Device Details
          schema:
            $ref: '#definitions/Device'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: create-device
  /devices/{deviceID}:
    get:
      description: Get a device
      security:
        - api_key: []
      produces:
        - application/json
      responses:
        200:
          description: A room
          schema:
            $ref: '#/definitions/Device'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      x-lambda-function: get-device
    patch:
      description: Update device name and location. (To update parameters need to delete and re-add)
      security:
        - api_key: []
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        description: Device to be updated to API. (Only name, type, and room)
        required: true
        content:
          application/json:
            schema:
              $ref: '#definitions/Device'
      responses:
        200:
          description: Device Details
          schema:
            $ref: '#definitions/Device'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#definitions/Error'
      x-lambda-function: update-device


securityDefinitions:
  api_key:
    type: apiKey
    name: x-api-key
    in: header


definitions:
  Error:
    description: Error Message
    properties:
      errorMessage:
        type: string
        description: Description of the error message.
  Room:
    description: A room is a way to organize devices in your home api.
    type: object
    properties:
      room_id:
        type: string
        description: Unique identifier of the the room.
      roomName:
        type: string
        description: Name of the room
      created_at:
        type: string
        description: Time Room was created
      updated_at:
        type: string
        description: Time Room was last updated
  Device:
    description: A device to be shadowed by API
    type: object
    properties:
      device_id:
        type: string
        description: Unique identifier of the device, not required on create
        required: false
      room_id:
        type: string
        description: Room where device is located, can be blank which means it does not belong to a room.
        required: false
      deviceName:
        type: string
        description: Name to identify the device
      deviceType:
        type: string
        description: General type of device (thermostat, light, lock, etc.)
      devicePath:
        type: string
        description: Path where device can obtain its properties
        required: false

#Lambda Functions
  
x-lambda-functions:
  #rooms 
  create-room:
    runtime: python3.6
    handler: create_room.lambda_handler
    memory: 128
    path_to_code: ./rooms
  get-rooms:
    runtime: python3.6
    handler: get_rooms.lambda_handler
    memory: 128
    path_to_code: ./rooms
  get-room:
    runtime: python3.6
    handler: get_room.lambda_handler
    memory: 128
    path_to_code: ./rooms
  delete-room:
    runtime: python3.6
    handler: delete_room.lambda_handler
    memory: 128
    path_to_code: ./rooms
  update-room:
    runtime: python3.6
    handler: update_room.lambda_handler
    memory: 128
    path_to_code: ./rooms
  #devices
  create-device:
    runtime: python3.6
    handler: create_device.lambda_handler
    memory: 128
    path_to_code: ./devices
  update-device:
    runtime: python3.6
    handler: update_device.lambda_handler
    memory: 128
    path_to_code: ./devices
  get-device:
    runtime: python3.6
    handler: get_device.lambda_handler
    memory: 128
    path_to_code: ./devices
  get-devices:
    runtime: python3.6
    handler: get_devices.lambda_handler
    memory: 128
    path_to_code: ./devices